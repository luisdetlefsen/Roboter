package roboter;

import Listeners.KeyboardListener;
import Listeners.MouseListener;
import Listeners.MouseMotionListener;
import Notifications.DesktopNotifier;
import Notifications.Notifier;
import Recorder.EventRecorder;
import java.util.logging.Level;
import java.util.logging.Logger;

import org.jnativehook.GlobalScreen;
import org.jnativehook.NativeHookException;

/**
 *
 * @author Luis Detlefsen <lgdetlef@gmail.com>
 */
public class MainForm extends javax.swing.JFrame {

    /**
     * Creates new form MainForm
     */
    public MainForm() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        chkRecordKeys = new javax.swing.JCheckBox();
        chkRecordClicks = new javax.swing.JCheckBox();
        chkRecordMouseMov = new javax.swing.JCheckBox();
        chkRecordDelays = new javax.swing.JCheckBox();
        jLabel4 = new javax.swing.JLabel();
        inRepeat = new javax.swing.JSpinner();
        jLabel5 = new javax.swing.JLabel();
        inDelay = new javax.swing.JSpinner();
        jButton1 = new javax.swing.JButton();
        chkNotifications = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Roboter - Record and reproduce user activity");

        jLabel1.setText("Press F8 to start recording activity");

        jLabel2.setText("Press F9 to start reproducing activity recorded");

        jLabel3.setText("Press F10 to clear activity recorded");

        chkRecordKeys.setSelected(true);
        chkRecordKeys.setText("Record keys pressed");
        chkRecordKeys.setEnabled(false);

        chkRecordClicks.setSelected(true);
        chkRecordClicks.setText("Record mouse clicks");

        chkRecordMouseMov.setSelected(true);
        chkRecordMouseMov.setText("Record mouse movement");

        chkRecordDelays.setSelected(true);
        chkRecordDelays.setText("Record delays between actions");

        jLabel4.setText("Repeat recorded actions");

        inRepeat.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(1), Integer.valueOf(1), null, Integer.valueOf(1)));

        jLabel5.setText("Delay between repetitions (seconds)");

        inDelay.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(0), Integer.valueOf(0), null, Integer.valueOf(1)));

        jButton1.setBackground(new java.awt.Color(153, 255, 153));
        jButton1.setText("Apply settings");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        chkNotifications.setSelected(true);
        chkNotifications.setText("Show notifications");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(chkRecordMouseMov)
                    .addComponent(chkRecordClicks)
                    .addComponent(jLabel3)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(chkRecordDelays)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(27, 27, 27)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel4))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(inRepeat)
                                    .addComponent(inDelay, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton1))
                    .addComponent(chkRecordKeys)
                    .addComponent(chkNotifications))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(chkNotifications)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chkRecordKeys)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chkRecordClicks)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chkRecordMouseMov)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chkRecordDelays)
                .addGap(3, 3, 3)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(inRepeat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(inDelay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        setup();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void turnOffLogger() {
        Logger logger = Logger.getLogger(GlobalScreen.class.getPackage().getName());
        logger.setLevel(Level.OFF);
        //logger.setUseParentHandlers(false);
    }
    EventRecorder er = new EventRecorder();
    MouseListener ml;
    KeyboardListener kl;
    MouseMotionListener mml;
    Notifier n;

    private void setup() {
        if (n == null) {
            n = new DesktopNotifier();
            er.setNotifier(n);
        }

        n.setDisplayNotifications(false);

        er.clearRecordedEvents();
        if (ml != null) {
            GlobalScreen.removeNativeMouseListener(ml);
        }
        GlobalScreen.removeNativeKeyListener(kl);
        GlobalScreen.removeNativeMouseMotionListener(mml);
        try {
            GlobalScreen.registerNativeHook();

        } catch (NativeHookException ex) {
            System.err.println("There was a problem registering the native hook.");
            System.err.println(ex.getMessage());

            System.exit(1);
        }

        if (chkRecordDelays.isSelected()) {
            er.setRecordDelays(true);
        }

        if (chkRecordClicks.isSelected()) {
            ml = new MouseListener(er);
            GlobalScreen.addNativeMouseListener(ml);
        }

        if (chkRecordKeys.isSelected()) {
            kl = new KeyboardListener(er);
            GlobalScreen.addNativeKeyListener(kl);
        }

        if (chkRecordMouseMov.isSelected()) {
            mml = new MouseMotionListener(er);
            GlobalScreen.addNativeMouseMotionListener(mml);
        }

        er.setRecordDelays(chkRecordDelays.isSelected());

        er.setDelayAfterIteration((int) inDelay.getValue());
        er.setNumberOfIterations((int) inRepeat.getValue());
        if (chkNotifications.isSelected()) {
            n.setDisplayNotifications(true);
        }
        turnOffLogger();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                MainForm m = new MainForm();
                m.setVisible(true);
                m.setLocationRelativeTo(null);
                m.setup();
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox chkNotifications;
    private javax.swing.JCheckBox chkRecordClicks;
    private javax.swing.JCheckBox chkRecordDelays;
    private javax.swing.JCheckBox chkRecordKeys;
    private javax.swing.JCheckBox chkRecordMouseMov;
    private javax.swing.JSpinner inDelay;
    private javax.swing.JSpinner inRepeat;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    // End of variables declaration//GEN-END:variables
}
